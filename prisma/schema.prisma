generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  first_name String @db.VarChar(50)
  last_name String @db.VarChar(50)
  email String @unique @db.VarChar(50)
  mobile String @db.VarChar(50)
  password String @db.VarChar(50)
  otp String @db.VarChar(10)
  role Role @default(SUBSCRIBER)
  comments Comment[]
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}


model Category {
  id        Int         @id @default(autoincrement())
  name      String      @unique @db.VarChar(100)
  slug      String      @unique @db.VarChar(100)
  createdAt DateTime    @default(now()) @db.Timestamp(0)
  updatedAt DateTime    @default(now()) @updatedAt @db.Timestamp(0)
  newsList  News[]    
}

model News {
  id         Int         @id @default(autoincrement())
  title      String      @db.VarChar(100)
  slug       String      @unique @db.VarChar(100)
  shortDes   String      @db.VarChar(400)
  img1       String      @db.VarChar(300)
  img2       String      @db.VarChar(300)
  img3       String      @db.VarChar(300)
  img4       String      @db.VarChar(300)
  keywords   String      @db.VarChar(300)
  longDes    String      @db.Text
  type       String      @db.VarChar(200)
  catID      Int
  comments   Comment[]
  category   Category    @relation(fields: [catID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt  DateTime    @default(now()) @db.Timestamp(0)
  updatedAt  DateTime    @default(now()) @updatedAt @db.Timestamp(0)
}


model Comment {
  id           Int         @id @default(autoincrement())
  userID       Int
  postID       Int
  user         User        @relation(fields: [userID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  news         News        @relation(fields: [postID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  description  String      @db.VarChar(1000)
  createdAt    DateTime    @default(now()) @db.Timestamp(0)
  updatedAt    DateTime    @default(now()) @updatedAt @db.Timestamp(0)
}

model Social {
  id        Int       @id @default(autoincrement())
  facebook  String?   @db.VarChar(200)
  youtube   String?   @db.VarChar(200)
  twitter   String?   @db.VarChar(200)
  linkedin  String?   @db.VarChar(200)
  about     String?   @db.Text
  address   String?   @db.Text
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
}

model Subscriber {
  id        Int       @id @default(autoincrement())
  email     String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp(0)
}

model Policy {
  id        Int       @id @default(autoincrement())
  longDes   String    @db.LongText
  type      String    @db.VarChar(50)
}




enum Role {
  ADMIN
  EDITOR
  AUTHOR
  CONTRIBUTOR
  SUBSCRIBER
}